from sage.plot.colors import *

#MCmoins = matrix ( [[1, 0, -C[0]],[0, 1, -C[1]],[0,0,1]])
#M       = matrix ( [[cos(t), -sin(t), 0],[sin(t), cos(t), 0],[0, 0, 1]])
NbTick = 70
#-----------------COORDONNEE DU RECTANGLE -----------------#
RectangleX1 = 0
RectangleX2 = 40
RectangleX3 = 40
RectangleX4 = 0

RectangleY1 = 0
RectangleY2 = 0
RectangleY3 = 20
RectangleY4 = 20

#-----------------COORDONNEE DU MILIEU DU RECTANGLE -----------------#
xMilieuRec = ((RectangleX1+RectangleX2)/2)
yMilieuRec = ((RectangleY1+RectangleY4)/2)

#----------------RECTANGLE QUI CORRESPOND A LA BORDURE-------------------------#

polygoneRectangleBordure = polygon2d([(RectangleX1 - 1.5,RectangleY1 - 1.5), (RectangleX2 + 1.5,RectangleY2 - 1.5), (RectangleX3 +1.5,RectangleY3 + 1.5), (RectangleX4 - 1.5,RectangleY4 + 1.5)], color='peru')


#-----------------RECTANGLE QUI CORRESPOND AU BILLARD -----------------#
polygoneRectangle = polygon2d([(RectangleX1,RectangleY1), (RectangleX2,RectangleY2), (RectangleX3,RectangleY3), (RectangleX4,RectangleY4)], color='green')

#----------------- NOMBRE DE POINT CORRESPONDANT AU CERCLE -----------------#
N=20

#----------------- RAYON DES BOULES -----------------#
rBoule  = 1

#----------------- TAILLE DES AXES (ABCISSE ET ORDONNEE) -----------------#
cadre = 43
#----------------- COORDONNEE HOMOGENE COMMUNE A TOUTES LES BOULES -----------------#
z = [1 for k in [0..N-1] ]

#-----------------DIFFERENT POINT DU CERCLE / BOULE BLANCHE -----------------#
xBlanche = [(rBoule*cos(k*2*pi/N) + xMilieuRec + (xMilieuRec/2)) for k in [0..N-1] ]
yBlanche = [rBoule*sin(k*2*pi/N) + yMilieuRec for k in [0..N-1] ]

#-----------------DIFFERENT POINT DU CERCLE / BOULE ROUGE -----------------#
xRouge = [(rBoule*cos(k*2*pi/N)) + (xMilieuRec/2) for k in [0..N-1] ]
yRouge = [rBoule*sin(k*2*pi/N) + yMilieuRec for k in [0..N-1] ]

#-----------------DIFFERENT POINT DU CERCLE / BOULE BLEU -----------------#
xBleu = [(rBoule*cos(k*2*pi/N)) + ((xMilieuRec/2)-((rBoule*2))) for k in [0..N-1] ]
yBleu = [rBoule*sin(k*2*pi/N) + (yMilieuRec-(rBoule )) for k in [0..N-1] ]

#-----------------DIFFERENT POINT DU CERCLE / BOULE JAUNE -----------------#
xJaune = [(rBoule*cos(k*2*pi/N)) + ((xMilieuRec/2)-((rBoule*2))) for k in [0..N-1] ]
yJaune = [rBoule*sin(k*2*pi/N) + (yMilieuRec+(rBoule )) for k in [0..N-1] ]

#------------------canne---------------------#
p1 = vector([40,10,1])
p2 = vector([33,7,1])

L = [p1, p2]


#-----------------FONCTION PERMETTANT DE CREER LA COLLECTION DE VECTEUR POUR CHAQUE BOULE -----------------#
def creationBoule(x,y,z) :
    return [ vector(RR, zip(x,y,z)[j]) for j in [0..len(x)-1] ]

#----------------- CREATION DES MATRICES POUR CHAQUE BOULE -----------------#
BouleBlanche  = creationBoule(xBlanche, yBlanche, z)
BouleRouge  = creationBoule(xRouge, yRouge, z)
BouleBleu = creationBoule(xBleu, yBleu, z)
BouleJaune = creationBoule(xJaune,yJaune,z)


#----------------- FONCTION DE TRANSLATION BOULE -----------------#
def translationDirecteBoule (tx, ty, Color) :

    if (Color == 'white'):
        global BouleBlanche
        Circle = BouleBlanche
    if (Color == 'red'):
        global BouleRouge
        Circle = BouleRouge
    if (Color == 'blue'):
        global BouleBleu
        Circle = BouleBleu
    if (Color == 'yellow'):
        global BouleJaune
        Circle = BouleJaune

    Mt  = matrix ( [[1, 0, tx], [0, 1, ty], [0,0,1]])
    Cercle   = [Mt*Circle[j] for j in [0..N-1]] #trasssssssssssééz de la boule
    if (Color == 'white'):
        BouleBlanche = Cercle
    if (Color == 'red'):
        BouleRouge = Cercle
    if (Color == 'blue'):
        BouleBleu = Cercle
    if (Color == 'yellow'):
        BouleJaune = Cercle

    CircleTrace = [Cercle[j][0:2] for j in [0..N-1]] #permet la 2D
    return polygon(CircleTrace, fill=True, rgbcolor=Color, xmin=-3, xmax=cadre, ymin=-3, ymax=cadre/2)
#------------------BOB-------------------------------#

def GererDeplacementDesBoules (j,Color):
    j = j - 20;
    if Color == 'white':
        if j >= 0 and j <= 9:
            return translationDirecteBoule (-1,1, Color)
        if j > 9 and j <= 18:
             return translationDirecteBoule (-1,-1, Color)
        if j > 18 and j <=26:
            return translationDirecteBoule (1,-1, Color)
        if j > 26 and j <45:
            return translationDirecteBoule (1,0.90, Color)
        else:
            return translationDirecteBoule (0,0, Color)
    if Color == 'red':
        if j >= 18 and j <= 27:
            return translationDirecteBoule (-1,-1, Color)
        else:
            return translationDirecteBoule (0,0, Color)
    if Color == 'blue':
        if j >= 18 and j <= 25:
            return translationDirecteBoule (-1,-1.15, Color)
        else:
            return translationDirecteBoule (0,0, Color)
    if Color == 'yellow':
        if j >= 18 and j <= 25:
            return translationDirecteBoule (-1,1.15, Color)
        else:
            return translationDirecteBoule (0,0, Color)
    else :
        return translationDirecteBoule (0,0, Color)
#----------------- ANIMATION QUEUE ----------------------------------------#
MGlobal  = matrix ( [[cos(0), -sin(0), 0],[sin(0), cos(0), 0],[0, 0, 1]])


def Rotation(t) :
    M = matrix ( [[cos(t), -sin(t), 0],[sin(t), cos(t), 0],[0, 0, 1]])
    global MGlobal
    matrix ( [[cos(t), -sin(t), 0],[sin(t), cos(t), 0],[0, 0, 1]])

    MCplus  = matrix ( [[1, 0,p2[0]], [0, 1, p2[1]], [0,0,p2[2]]])
    MCmoins  = matrix ( [[1, 0,-p2[0]], [0, 1, -p2[1]], [0,0,p2[2]]])
    Mtot = MCplus * M * MCmoins
    MGlobal = Mtot
    Ltourne= [Mtot*L[j] for j in [0..1]]
    LigneTrace = [Ltourne[j][0:2] for j in [0..1]]
    return line(LigneTrace,color = 'black', thickness = 4)


def translationQueu(tx, ty) :

    global MGlobal
    M = matrix ( [[MGlobal[0][0], MGlobal[0][1], MGlobal[0][2]+tx],[MGlobal[1][0], MGlobal[1][1], MGlobal[1][2]+ty],[0, 0, 1]])
    Ltourne = [M*L[j] for j in [0..1]]
    LigneTrace = [Ltourne[j][0:2] for j in [0..1]]
    return line(LigneTrace,color = 'black', thickness = 4)


def GererAnimationRotation(j,L) :
    if (j <= 14):
        return Rotation (-(pi*(j*0.05)/2))
    elif(j >= 14 and j <= 20):
        return translationQueu(-((j-14)*0.40), ((j-14)*0.40))
    return translationQueu(((j-20)*0.65), -((j-20)*0.65))


QUEU = [GererAnimationRotation((j),L) for j in sxrange (0.01,NbTick,1)]
animationQueue = animate(QUEU, axes=False,  xmin=-3, xmax=cadre, ymin=-3, ymax=cadre/2)

#----------------- TRANSLATION ET ANIMATION DE LA BOULE BLANCHE -----------------#
# TranslationBouleBlanche = [translationDirecteBoule(-j, 0, BouleBlanche, 'white') for j in sxrange (0.01,20,1)]
TranslationBouleBlanche = [GererDeplacementDesBoules(j,'white') for j in sxrange (0.01,NbTick,1)]
animBouleBlanche   = animate(TranslationBouleBlanche, axes=False)

#----------------- TRANSLATION ET ANIMATION DE LA BOULE ROUGE -----------------#
TranslationBouleRouge = [GererDeplacementDesBoules(j,'red') for j in sxrange (0.01,NbTick,1)]
animBouleRouge   = animate(TranslationBouleRouge, axes=False)

#----------------- TRANSLATION ET ANIMATION DE LA BOULE BLEU -----------------#
TranslationBouleBleu = [GererDeplacementDesBoules(j,'blue') for j in sxrange (0.01,NbTick,1)]
animBouleBleu   = animate(TranslationBouleBleu, axes=False)

#----------------- TRANSLATION ET ANIMATION DE LA BOULE JAUNE -----------------#
TranslationBouleJaune = [GererDeplacementDesBoules(j,'yellow') for j in sxrange (0.01,NbTick,1)]
animBouleJaune   = animate(TranslationBouleJaune, axes=False)

#----------------- "ANIMATION" DU RECTANGLE -----------------#
rectangle = [polygoneRectangle for j in sxrange (0.01,NbTick,1)]
anim = animate(rectangle, axes=False)

rectangle2 = [polygoneRectangleBordure for j in sxrange (0.01,NbTick,1)]
anim2 = animate (rectangle2, axes=False)

c3=circle((1,1), 1.3, color=('black'), fill=True)
circle3 = [c3 for j in sxrange (0.01,NbTick,1)]
anim3 = animate(circle3, axes=False)

c4=circle((39,1), 1.3, color=('black'), fill=True)
trou2 = [c4 for j in sxrange (0.01,NbTick,1)]
anim4 = animate(trou2, axes=False)

c5=circle((39,19), 1.3, color=('black'), fill=True)
trou3 = [c5 for j in sxrange (0.01,NbTick,1)]
anim5 = animate(trou3, axes=False)

c6=circle((1,19), 1.3, color=('black'), fill=True)
trou4 = [c6 for j in sxrange (0.01,NbTick,1)]
anim6 = animate(trou4, axes=False)



anim2 + anim3 + anim4 + anim5+ anim6  + anim  + animBouleBlanche + animBouleBleu + animBouleJaune + animBouleRouge + animationQueue









